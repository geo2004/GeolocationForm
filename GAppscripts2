const sheetName = 'Geolocation';
const scriptProp = PropertiesService.getScriptProperties();
const folderName = 'Form Uploads'; // The name of the folder to store the uploaded files

function initialSetup() {
  const activeSpreadsheet = SpreadsheetApp.getActiveSpreadsheet();
  scriptProp.setProperty('key', activeSpreadsheet.getId());
}

function doPost(e) {
  const lock = LockService.getScriptLock();
  lock.tryLock(10000);

  try {
    const doc = SpreadsheetApp.openById(scriptProp.getProperty('key'));
    const sheet = doc.getSheetByName(sheetName);

    const headers = sheet.getRange(1, 1, 1, sheet.getLastColumn()).getValues()[0];
    const nextRow = sheet.getLastRow() + 1;

    // Upload the file to the Google Drive folder and get the file ID
    const file = e.parameter.Upload;
    const folder = getOrCreateFolder(folderName);
    const fileBlob = Utilities.newBlob(file, e.postData.contentsType, e.parameter.Name);
    const fileID = folder.createFile(fileBlob).getId();

    const newRow = headers.map(function(header) {
      if (header === 'Date') {
        return new Date();
      } else if (header === 'Upload') {
        return fileID;
      } else {
        return e.parameter[header];
      }
    });

    sheet.getRange(nextRow, 1, 1, newRow.length).setValues([newRow]);

    return ContentService
      .createTextOutput(JSON.stringify({ 'result': 'success', 'row': nextRow }))
      .setMimeType(ContentService.MimeType.JSON);
  } catch (e) {
    return ContentService
      .createTextOutput(JSON.stringify({ 'result': 'error', 'error': e }))
      .setMimeType(ContentService.MimeType.JSON);
  } finally {
    lock.releaseLock();
  }
}

// Create a folder with the given name if it does not exist, otherwise return the folder
function getOrCreateFolder(folderName) {
  const folders = DriveApp.getFoldersByName(folderName);
  if (folders.hasNext()) {
    return folders.next();
  } else {
    return DriveApp.createFolder(folderName);
  }
}
